def return_email_instructions() -> str:
    instructions_v1 = '''
    You are required to extract data from the provided text, which is from a maritime noon report email text.
    The email is a daily report from a shipping company, containing information about the ships, their
    locations, and other relevant details. I will provide you with an example email text and its expected 
    output in the contents parameter. I will then provide you with the target email text, 
    and you will extract the required information.

    <TASK>
    Extract the following data from the email text:

    - Date of the email report
    - Fuel consumed by fuel types present in the report

    **Key Reminder:**
    * ** Date formats might vary but look for date formats like:
    *   - "24th Jan'25" 
    *   - "24/01/2025"
    *   - "January 24, 2025"
    *   - "01-Jan-24"
    * ** Look for variations in how fuel consmption might be reported, such as:
    *   - "Bunkers consumed in last 24 hours: VLSFO - 0.1mt, MGO - 2.4mt"
    *   - "24hr consumption: VLSFO: 1.2 MT, MGO: 0.4 MT"
    *   - "Consumed: HSFO: nil / VLSFO: 22.4mt / LSGO: nil"
    *   - "Fuel Used: 10.2MT VLSFO"
    * ** Engines should be 1-indexed, meaning the first engine is referred to as "me1", the second as "me2", and so on.
    *   - If the report contains information about fuel consumption both with and without engine details, extract data at the most granular level possible.
    </TASK>

    <CONSTRAINTS>
        * **Schema Adherence:**  **Strictly adhere to the provided schema in the response_schema variable.**  Do not invent or assume any data or schema elements beyond what is given.
        * **Do not include any additional text or explanations, just return the JSON object.
        * **Ensure that the date is in the format YYYY-MM-DD and the fuel amounts are numerical values.
        * **If any information is missing or cannot be determined, leave that field out of the JSON object.

    </CONSTRAINTS>
    '''

    return instructions_v1


def return_pdf_instructions() -> str:
    instructions_v1 = '''
    You are required to extract data from the provided PDF, which is from a maritime noon report PDF.
    The PDF is a daily report from a shipping company, containing information about the ships, their
    locations, and other relevant details. I will provide you with an example PDF and its expected 
    output in the contents parameter. I will then provide you with the target PDF file, 
    and you will extract the required information.

    <TASK>
    Extract the following data from the PDF:

    - Date of the noon report
    - Fuel consumed by fuel types present in the report (by engine if available)
    - Power generated (by each engine if available)

    **Key Reminder:**
    * ** Date formats might vary but look for date formats like:
    *   - "24th Jan'25" 
    *   - "24/01/2025"
    *   - "January 24, 2025"
    *   - "01-Jan-24"
    * ** Fuel consumption should be reported in MT. Look for variations in how fuel consmption might be reported, such as:
    *   - "Bunkers consumed in last 24 hours: VLSFO - 0.1mt, MGO - 2.4mt"
    *   - "24hr consumption: VLSFO: 1.2 MT, MGO: 0.4 MT"
    *   - "Consumed: HSFO: nil / VLSFO: 22.4mt / LSGO: nil"
    *   - "Fuel Used: 10.2MT VLSFO"
    * ** Look for variations in how fuel consmption might be reported, such as:
    *   - "Power consumed for the day: 200 MW"
    *   - "Power generated by engines: ME1: 100 MW, ME2: 150 MW"
    *   - "Total power output in 24H: 250 MW"
    * ** Engines (if present in the report) should be 1-indexed, meaning the first engine is referred to as "me1", the second as "me2", and so on.
    *   - If the report contains information both with and without engine details, extract data at the most granular level possible.
    </TASK>

    <CONSTRAINTS>
        * **Schema Adherence:**  **Strictly adhere to the provided schema in the response_schema variable.**  Do not invent or assume any data or schema elements beyond what is given.
        * **Do not include any additional text or explanations, just return the JSON object.
        * **Ensure that the date is in the format YYYY-MM-DD and the metrics (fuel and power) are numerical values.
        * **If any information is missing or cannot be determined, leave that field out of the JSON object.

    </CONSTRAINTS>
    '''

    return instructions_v1

def return_dream_specific_instructions() -> str:
    instructions_v1 = '''
    This vessel only burns MGO fuel type, so assume all fuel types are MGO.
    '''

    return instructions_v1